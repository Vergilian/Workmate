import re
from collections import defaultdict
from typing import Dict

LogData = Dict[str, Dict[str, int]]

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–æ–≤
LOG_PATTERN = re.compile(
    r"\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3} (?P<level>DEBUG|INFO|WARNING|ERROR|CRITICAL) (?P<handler>django\.[a-z.]+): (?P<message>.+)")


def parse_log_file(filepath: str) -> dict:
    print(f"üìÑ –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª: {filepath}")
    result = defaultdict(lambda: defaultdict(int))

    with open(filepath, encoding='utf-8') as f:
        for line in f:
            match = LOG_PATTERN.search(line)
            if match:
                level = match.group("level")
                handler = match.group("handler")
                message = match.group("message")

                # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å (–º–µ—Ç–æ–¥ GET/POST –∏ URL –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏)
                if "GET" in message or "POST" in message:
                    url = message.split(" ")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –ø–æ—Å–ª–µ –º–µ—Ç–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /admin/dashboard/)
                    result[url][level] += 1
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
                    result[handler][level] += 1

                result["__total__"]["requests"] += 1

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä—É—á–∫–∏ –∏ –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å—Ç—å –∫–ª—é—á–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ —Ä–∞–≤–Ω—ã 0
    for url in result:
        for level in ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']:
            result[url].setdefault(level, 0)

    return result


# –î–ª—è –ø—Ä–∏–º–µ—Ä–∞:
if __name__ == "__main__":
    log_files = ["logs/app1.log", "logs/app2.log", "logs/app3.log"]  # –ü—Ä–∏–º–µ—Ä –ø—É—Ç–µ–π
    all_results = defaultdict(lambda: defaultdict(int))

    for log_file in log_files:
        data = parse_log_file(log_file)
        # –ú–µ—Ä–∂–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for url, levels in data.items():
            for level, count in levels.items():
                all_results[url][level] += count

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ URL –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    sorted_urls = sorted(all_results.keys())

    # –í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞
    total_requests = all_results['__total__']['requests']
    print(f"Total requests: {total_requests }‚úÖ")
    print("\nHANDLER               DEBUG   INFO    WARNING  ERROR   CRITICAL")

    for url in sorted_urls:
        # –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–∂–¥–æ–º—É URL
        line = f"{url:<20}"  # –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º URL, –≤—ã—Ä–∞–≤–Ω–∏–≤–∞—è –µ–≥–æ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
        for level in ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']:
            line += f"{all_results[url][level]:<8}"  # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        print(line)

    # –°—É–º–º–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —É—Ä–æ–≤–Ω—é
    print(" " * 20, end="")
    for level in ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']:
        total_level = sum(all_results[url][level] for url in sorted_urls)
        print(f"{total_level:<8}", end="")
    print()
